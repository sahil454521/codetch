"use client";

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { useEffect } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Note: In a client component, you can't export metadata like this
// We'll need to handle this differently
const metadataObject = {
  title: "Whether Predictions",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Suppress hydration warnings
  useEffect(() => {
    // This runs only on client, after hydration
    // It will suppress the specific warning about body attributes
    const originalError = console.error;
    console.error = (...args) => {
      if (
        args[0] &&
        typeof args[0] === "string" &&
        args[0].includes("Hydration failed")
      ) {
        if (args[0].includes("cz-shortcut-listen")) {
          // Suppress this specific hydration warning
          return;
        }
      }
      originalError.apply(console, args);
    };

    return () => {
      console.error = originalError;
    };
  }, []);

  // Add the metadata to the document head using useEffect
  useEffect(() => {
    document.title = metadataObject.title;
    // You can add other metadata here if needed
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription) {
      metaDescription.setAttribute('content', metadataObject.description);
    } else {
      const meta = document.createElement('meta');
      meta.name = 'description';
      meta.content = metadataObject.description;
      document.head.appendChild(meta);
    }
  }, []);

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
